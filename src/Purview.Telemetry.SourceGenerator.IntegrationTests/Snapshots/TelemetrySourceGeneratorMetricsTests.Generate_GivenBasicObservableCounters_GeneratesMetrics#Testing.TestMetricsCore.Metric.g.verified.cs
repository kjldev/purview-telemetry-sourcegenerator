//HintName: Testing.TestMetricsCore.Metric.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Purview.Telemetry.SourceGenerator
//     on {Scrubbed}.
//
//     Changes to this file may cause incorrect behaviour and will be lost
//     when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

#nullable enable

namespace Testing
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
	sealed partial class TestMetricsCore : global::Testing.ITestMetrics
	{
		global::System.Diagnostics.Metrics.Meter _meter = default!;

		global::System.Diagnostics.Metrics.ObservableCounter<int>? _observableCounterInstrument = null;
		global::System.Diagnostics.Metrics.ObservableCounter<int>? _observableCounter2Instrument = null;
		global::System.Diagnostics.Metrics.ObservableCounter<int>? _observableCounter3Instrument = null;

		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		public TestMetricsCore(global::System.Diagnostics.Metrics.IMeterFactory meterFactory)
		{
			InitializeMeters(meterFactory);
		}

		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		void InitializeMeters(global::System.Diagnostics.Metrics.IMeterFactory meterFactory)
		{
			if (_meter != null)
			{
				throw new global::System.Exception("The meters have already been initialized.");
			}

			global::System.Collections.Generic.Dictionary<string, object?> meterTags = new();

			PopulateMeterTags(meterTags);

			_meter = meterFactory.Create(new global::System.Diagnostics.Metrics.MeterOptions("testing-observable-meter")
			{
				Version = null,
				Tags = meterTags
			});

		}

		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		partial void PopulateMeterTags(global::System.Collections.Generic.Dictionary<string, object?> meterTags);

		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void ObservableCounter(System.Func<int> f, int intParam, bool boolParam)
		{
			if (_observableCounterInstrument != null)
			{
				return;
			}

			global::System.Diagnostics.TagList observableCounterTagList = new();

			observableCounterTagList.Add("intparam", intParam);
			observableCounterTagList.Add("boolparam", boolParam);

			_observableCounterInstrument = _meter.CreateObservableCounter<int>("observablecounter", f, unit: null, description: null
				, tags: observableCounterTagList
			);
		}
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void ObservableCounter2(global::System.Func<global::System.Diagnostics.Metrics.Measurement<int>> f, int intParam, bool boolParam)
		{
			if (_observableCounter2Instrument != null)
			{
				throw new global::System.Exception("observablecounter2 has already been initialized.");
			}

			global::System.Diagnostics.TagList observableCounter2TagList = new();

			observableCounter2TagList.Add("intparam", intParam);
			observableCounter2TagList.Add("boolparam", boolParam);

			_observableCounter2Instrument = _meter.CreateObservableCounter<int>("observablecounter2", f, unit: null, description: null
				, tags: observableCounter2TagList
			);
		}
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void ObservableCounter3(global::System.Func<global::System.Collections.Generic.IEnumerable<global::System.Diagnostics.Metrics.Measurement<int>>> f, int intParam, bool boolParam)
		{
			if (_observableCounter3Instrument != null)
			{
				return;
			}

			global::System.Diagnostics.TagList observableCounter3TagList = new();

			observableCounter3TagList.Add("intparam", intParam);
			observableCounter3TagList.Add("boolparam", boolParam);

			_observableCounter3Instrument = _meter.CreateObservableCounter<int>("observablecounter3", f, unit: null, description: null
				, tags: observableCounter3TagList
			);
		}
	}
}
