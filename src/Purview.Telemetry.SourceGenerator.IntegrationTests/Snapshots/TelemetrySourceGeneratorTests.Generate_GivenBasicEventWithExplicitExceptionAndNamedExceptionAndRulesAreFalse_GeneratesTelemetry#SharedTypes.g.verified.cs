//HintName: SharedTypes.g.cs
// <auto-generated>
//	This code was generated by the Purview.Telemetry.SourceGenerator
//	on {Scrubbed}.
//
//	Changes to this file may cause incorrect behaviour and will be lost
//	when the code is regenerated.
// </auto-generated>

#pragma warning disable 1591 // publicly visible type or member must be documented

#nullable enable

namespace Purview.Telemetry;

/// <summary>
/// Excludes the method from any activity, logging or meter generation.
/// </summary>
[global::System.Runtime.CompilerServices.CompilerGenerated]
[global::System.CodeDom.Compiler.GeneratedCode("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = false)]
[global::System.Diagnostics.Conditional("PURVIEW_TELEMETRY_ATTRIBUTES")]
sealed class ExcludeAttribute : global::System.Attribute { }

/// <summary>
/// Marker attribute to specify that a parameter should be included as a tag.
/// </summary>
[global::System.Runtime.CompilerServices.CompilerGenerated]
[global::System.CodeDom.Compiler.GeneratedCode("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[global::System.AttributeUsage(global::System.AttributeTargets.Parameter, AllowMultiple = false)]
[global::System.Diagnostics.Conditional("PURVIEW_TELEMETRY_ATTRIBUTES")]
[global::System.Diagnostics.CodeAnalysis.SuppressMessage(
	"Design",
	"CA1019:Define accessors for attribute arguments"
)]
sealed class TagAttribute : global::System.Attribute
{
	/// <summary>
	/// Creates a new instance of a <see cref="TagAttribute"/>.
	/// </summary>
	public TagAttribute() { }

	/// <summary>
	/// Creates a new instance of a <see cref="TagAttribute"/> and specifies the
	/// <see cref="SkipOnNullOrEmpty"/> property.
	/// </summary>
	/// <param name="skipOnNullOrEmpty">Specifies the <see cref="SkipOnNullOrEmpty" />.</param>
	public TagAttribute(bool skipOnNullOrEmpty)
	{
		SkipOnNullOrEmpty = skipOnNullOrEmpty;
	}

	/// <summary>
	/// Creates a new instance of a <see cref="TagAttribute"/> and specifies the
	/// <see cref="Name" /> property, and optionally the
	/// <see cref="SkipOnNullOrEmpty"/> property.
	/// </summary>
	/// <param name="name">Specifies the key/ name of the tag.</param>
	/// <param name="skipOnNullOrEmpty">Optionally specifies the <see cref="SkipOnNullOrEmpty" />.</param>
	public TagAttribute(string? name, bool skipOnNullOrEmpty = false)
	{
		Name = name;
		SkipOnNullOrEmpty = skipOnNullOrEmpty;
	}

	/// <summary>
	/// Optionally specifies the key/ name of the tag. If one is not specified,
	/// the of the parameter is used.
	/// </summary>
	public string? Name { get; set; }

	/// <summary>
	/// Determines if the tag is skipped if it equals it's default value.
	/// Defaults to false.
	/// </summary>
	public bool SkipOnNullOrEmpty { get; set; }
}

/// <summary>
/// Marker attribute to control the generation of telemetry-based classes.
/// </summary>
[global::System.Runtime.CompilerServices.CompilerGenerated]
[global::System.CodeDom.Compiler.GeneratedCode("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[global::System.AttributeUsage(
	global::System.AttributeTargets.Assembly | global::System.AttributeTargets.Interface,
	AllowMultiple = false
)]
[global::System.Diagnostics.Conditional("PURVIEW_TELEMETRY_ATTRIBUTES")]
[global::System.Diagnostics.CodeAnalysis.SuppressMessage(
	"Design",
	"CA1019:Define accessors for attribute arguments"
)]
sealed class TelemetryGenerationAttribute : global::System.Attribute
{
	/// <summary>
	/// Initializes a new instance of the <see cref="TelemetryGenerationAttribute"/> class.
	/// </summary>
	public TelemetryGenerationAttribute() { }

	/// <summary>
	/// Initializes a new instance of the <see cref="TelemetryGenerationAttribute"/> class, and
	/// specifies the <see cref="GenerateDependencyExtension"/> property and optionally the
	/// <see cref="ClassName"/> and <see cref="DependencyInjectionClassName"/> properties.
	/// </summary>
	/// <param name="generateDependencyExtension">Specifies the <see cref="GenerateDependencyExtension"/>.</param>
	/// <param name="className">Optionally specifies the <see cref="ClassName"/>.</param>
	/// <param name="dependencyInjectionClassName">Optionally specifies the <see cref="DependencyInjectionClassName"/>.</param>
	public TelemetryGenerationAttribute(
		bool generateDependencyExtension,
		string? className = null,
		string? dependencyInjectionClassName = null
	)
	{
		GenerateDependencyExtension = generateDependencyExtension;
		ClassName = className;
		DependencyInjectionClassName = dependencyInjectionClassName;
	}

	/// <summary>
	/// Initializes a new instance of the <see cref="TelemetryGenerationAttribute"/> class, and
	/// specifies the <see cref="ClassName"/> and optionally the <see cref="DependencyInjectionClassName"/> property.
	/// </summary>
	/// <param name="className">Specifies the <see cref="ClassName"/>.</param>
	/// <param name="dependencyInjectionClassName">Optionally specifies the <see cref="DependencyInjectionClassName"/>.</param>
	public TelemetryGenerationAttribute(
		string className,
		string? dependencyInjectionClassName = null
	)
	{
		ClassName = className;
		DependencyInjectionClassName = dependencyInjectionClassName;
	}

	/// <summary>
	/// Determines if an extension method is created registering
	/// the source interface and the generated class with
	/// and <see cref="global::Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
	/// </summary>
	public bool GenerateDependencyExtension { get; set; } = true;

	/// <summary>
	/// Optionally specifies the name of the telemetry implementation class to use.
	/// Defaults to null. When null, uses the source interface name minus any starting 'I',
	/// and appends 'Core' to the end.
	/// </summary>
	public string? ClassName { get; set; }

	/// <summary>
	/// Optionally specifies the name of the dependency injection class to generation.
	/// </summary>
	public string? DependencyInjectionClassName { get; set; }

	/// <summary>
	/// Determines if the generated dependency injection class is generated as public. Defaults to false (internal).
	/// </summary>
	public bool DependencyInjectionClassIsPublic { get; set; }
}