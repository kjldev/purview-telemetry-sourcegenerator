{
  Diagnostics: [
    {
      Location: /*
	[Event]
	void NoValueProvided();
      ^^^^^^^^^^^^^^^

*/
 Guid_1: (39,6)-(39,21),
      Message: It's best practice to accept an Activity parameter to ensure the Event, Tags and/ or Baggage are applied to the Activity you intended.,
      Severity: Warning,
      WarningLevel: 1,
      Descriptor: {
        Id: TSG3014,
        Title: Should accept an Activity to apply the Event/ Tags/ Baggage too,
        MessageFormat: It's best practice to accept an Activity parameter to ensure the Event, Tags and/ or Baggage are applied to the Activity you intended.,
        Category: Activity.Usage,
        DefaultSeverity: Warning,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
	[Context]
	void SerializePayloadResult(int payloadStringLength);
      ^^^^^^^^^^^^^^^^^^^^^^

*/
 Guid_1: (45,6)-(45,28),
      Message: It's best practice to accept an Activity parameter to ensure the Event, Tags and/ or Baggage are applied to the Activity you intended.,
      Severity: Warning,
      WarningLevel: 1,
      Descriptor: {
        Id: TSG3014,
        Title: Should accept an Activity to apply the Event/ Tags/ Baggage too,
        MessageFormat: It's best practice to accept an Activity parameter to ensure the Event, Tags and/ or Baggage are applied to the Activity you intended.,
        Category: Activity.Usage,
        DefaultSeverity: Warning,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
	[Context]
	void SetDefaultTags(string distributedCacheType, string cacheKey, string? entityType);
      ^^^^^^^^^^^^^^

*/
 Guid_1: (51,6)-(51,20),
      Message: It's best practice to accept an Activity parameter to ensure the Event, Tags and/ or Baggage are applied to the Activity you intended.,
      Severity: Warning,
      WarningLevel: 1,
      Descriptor: {
        Id: TSG3014,
        Title: Should accept an Activity to apply the Event/ Tags/ Baggage too,
        MessageFormat: It's best practice to accept an Activity parameter to ensure the Event, Tags and/ or Baggage are applied to the Activity you intended.,
        Category: Activity.Usage,
        DefaultSeverity: Warning,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
	[Event]
	void ValueCached();
      ^^^^^^^^^^^

*/
 Guid_1: (54,6)-(54,17),
      Message: It's best practice to accept an Activity parameter to ensure the Event, Tags and/ or Baggage are applied to the Activity you intended.,
      Severity: Warning,
      WarningLevel: 1,
      Descriptor: {
        Id: TSG3014,
        Title: Should accept an Activity to apply the Event/ Tags/ Baggage too,
        MessageFormat: It's best practice to accept an Activity parameter to ensure the Event, Tags and/ or Baggage are applied to the Activity you intended.,
        Category: Activity.Usage,
        DefaultSeverity: Warning,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
	[Event]
	void RequestingValueFromCache();
      ^^^^^^^^^^^^^^^^^^^^^^^^

*/
 Guid_1: (57,6)-(57,30),
      Message: It's best practice to accept an Activity parameter to ensure the Event, Tags and/ or Baggage are applied to the Activity you intended.,
      Severity: Warning,
      WarningLevel: 1,
      Descriptor: {
        Id: TSG3014,
        Title: Should accept an Activity to apply the Event/ Tags/ Baggage too,
        MessageFormat: It's best practice to accept an Activity parameter to ensure the Event, Tags and/ or Baggage are applied to the Activity you intended.,
        Category: Activity.Usage,
        DefaultSeverity: Warning,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
	[Event]
	void CacheHit(int? dataLength);
      ^^^^^^^^

*/
 Guid_1: (60,6)-(60,14),
      Message: It's best practice to accept an Activity parameter to ensure the Event, Tags and/ or Baggage are applied to the Activity you intended.,
      Severity: Warning,
      WarningLevel: 1,
      Descriptor: {
        Id: TSG3014,
        Title: Should accept an Activity to apply the Event/ Tags/ Baggage too,
        MessageFormat: It's best practice to accept an Activity parameter to ensure the Event, Tags and/ or Baggage are applied to the Activity you intended.,
        Category: Activity.Usage,
        DefaultSeverity: Warning,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
	[Event]
	void CacheMiss();
      ^^^^^^^^^

*/
 Guid_1: (63,6)-(63,15),
      Message: It's best practice to accept an Activity parameter to ensure the Event, Tags and/ or Baggage are applied to the Activity you intended.,
      Severity: Warning,
      WarningLevel: 1,
      Descriptor: {
        Id: TSG3014,
        Title: Should accept an Activity to apply the Event/ Tags/ Baggage too,
        MessageFormat: It's best practice to accept an Activity parameter to ensure the Event, Tags and/ or Baggage are applied to the Activity you intended.,
        Category: Activity.Usage,
        DefaultSeverity: Warning,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
	[Log]
	void FailedToDeserializePayload(int dataLength, Exception ex);
      ^^^^^^^^^^^^^^^^^^^^^^^^^^

*/
 Guid_1: (15,6)-(15,32),
      Message: Because an exception parameter was defined and no log level was defined the level was inferred to be Error. Consider explicitly defining the required level.,
      Severity: Info,
      WarningLevel: 1,
      Descriptor: {
        Id: TSG2002,
        Title: Inferring error log level,
        MessageFormat: Because an exception parameter was defined and no log level was defined the level was inferred to be Error. Consider explicitly defining the required level.,
        Category: Logging.Usage,
        DefaultSeverity: Info,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
	[Log]
	void FailedToGetFromCache(string key, Exception ex);
      ^^^^^^^^^^^^^^^^^^^^

*/
 Guid_1: (18,6)-(18,26),
      Message: Because an exception parameter was defined and no log level was defined the level was inferred to be Error. Consider explicitly defining the required level.,
      Severity: Info,
      WarningLevel: 1,
      Descriptor: {
        Id: TSG2002,
        Title: Inferring error log level,
        MessageFormat: Because an exception parameter was defined and no log level was defined the level was inferred to be Error. Consider explicitly defining the required level.,
        Category: Logging.Usage,
        DefaultSeverity: Info,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
	[Log]
	void FailedToRefresh(string cacheKey, Exception ex);
      ^^^^^^^^^^^^^^^

*/
 Guid_1: (21,6)-(21,21),
      Message: Because an exception parameter was defined and no log level was defined the level was inferred to be Error. Consider explicitly defining the required level.,
      Severity: Info,
      WarningLevel: 1,
      Descriptor: {
        Id: TSG2002,
        Title: Inferring error log level,
        MessageFormat: Because an exception parameter was defined and no log level was defined the level was inferred to be Error. Consider explicitly defining the required level.,
        Category: Logging.Usage,
        DefaultSeverity: Info,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
	[Log]
	void FailedToRemove(string key, Exception ex);
      ^^^^^^^^^^^^^^

*/
 Guid_1: (24,6)-(24,20),
      Message: Because an exception parameter was defined and no log level was defined the level was inferred to be Error. Consider explicitly defining the required level.,
      Severity: Info,
      WarningLevel: 1,
      Descriptor: {
        Id: TSG2002,
        Title: Inferring error log level,
        MessageFormat: Because an exception parameter was defined and no log level was defined the level was inferred to be Error. Consider explicitly defining the required level.,
        Category: Logging.Usage,
        DefaultSeverity: Info,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
	[Log]
	void FailedToSerializePayload(string? fullName, Exception ex);
      ^^^^^^^^^^^^^^^^^^^^^^^^

*/
 Guid_1: (27,6)-(27,30),
      Message: Because an exception parameter was defined and no log level was defined the level was inferred to be Error. Consider explicitly defining the required level.,
      Severity: Info,
      WarningLevel: 1,
      Descriptor: {
        Id: TSG2002,
        Title: Inferring error log level,
        MessageFormat: Because an exception parameter was defined and no log level was defined the level was inferred to be Error. Consider explicitly defining the required level.,
        Category: Logging.Usage,
        DefaultSeverity: Info,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
	[Log]
	void FailedToSetValueInCache(string key, Exception ex);
      ^^^^^^^^^^^^^^^^^^^^^^^

*/
 Guid_1: (30,6)-(30,29),
      Message: Because an exception parameter was defined and no log level was defined the level was inferred to be Error. Consider explicitly defining the required level.,
      Severity: Info,
      WarningLevel: 1,
      Descriptor: {
        Id: TSG2002,
        Title: Inferring error log level,
        MessageFormat: Because an exception parameter was defined and no log level was defined the level was inferred to be Error. Consider explicitly defining the required level.,
        Category: Logging.Usage,
        DefaultSeverity: Info,
        IsEnabledByDefault: true
      }
    }
  ]
}