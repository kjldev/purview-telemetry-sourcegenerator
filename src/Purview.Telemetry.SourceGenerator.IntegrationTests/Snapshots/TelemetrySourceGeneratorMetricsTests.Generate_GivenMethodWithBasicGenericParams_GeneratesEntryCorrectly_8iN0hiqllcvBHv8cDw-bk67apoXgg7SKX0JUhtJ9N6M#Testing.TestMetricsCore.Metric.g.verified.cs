//HintName: Testing.TestMetricsCore.Metric.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Purview.Telemetry.SourceGenerator
//     on {Scrubbed}.
//
//     Changes to this file may cause incorrect behaviour and will be lost
//     when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

#nullable enable

namespace Testing
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
	sealed partial class TestMetricsCore : global::Testing.ITestMetrics
	{
		global::System.Diagnostics.Metrics.Meter _meter = default!;

		global::System.Diagnostics.Metrics.Counter<int>? _autoCounterInstrument = null;
		global::System.Diagnostics.Metrics.Counter<int>? _counter_AutoIncrementInstrument = null;
		global::System.Diagnostics.Metrics.Counter<int>? _counterInstrument = null;
		global::System.Diagnostics.Metrics.Histogram<int>? _histogramInstrument = null;
		global::System.Diagnostics.Metrics.UpDownCounter<int>? _upDownCounterInstrument = null;
		global::System.Diagnostics.Metrics.ObservableCounter<int>? _observableCounterInstrument = null;
		global::System.Diagnostics.Metrics.ObservableGauge<int>? _observableGaugeInstrument = null;
		global::System.Diagnostics.Metrics.ObservableUpDownCounter<int>? _observableUpDownCounterInstrument = null;

		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		public TestMetricsCore(global::System.Diagnostics.Metrics.IMeterFactory meterFactory)
		{
			InitializeMeters(meterFactory);
		}

		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		void InitializeMeters(global::System.Diagnostics.Metrics.IMeterFactory meterFactory)
		{
			if (_meter != null)
			{
				throw new global::System.Exception("The meters have already been initialized.");
			}

			global::System.Collections.Generic.Dictionary<string, object?> meterTags = new();

			PopulateMeterTags(meterTags);

			_meter = meterFactory.Create(new global::System.Diagnostics.Metrics.MeterOptions("testing-meter")
			{
				Version = null,
				Tags = meterTags
			});

			global::System.Collections.Generic.Dictionary<string, object?> autoCounterTags = new();

			PopulateAutoCounterTags(autoCounterTags);

			_autoCounterInstrument = _meter.CreateCounter<int>(name: "autocounter", unit: null, description: null, tags: autoCounterTags);
			global::System.Collections.Generic.Dictionary<string, object?> counter_AutoIncrementTags = new();

			PopulateCounter_AutoIncrementTags(counter_AutoIncrementTags);

			_counter_AutoIncrementInstrument = _meter.CreateCounter<int>(name: "counter_autoincrement", unit: null, description: null, tags: counter_AutoIncrementTags);
			global::System.Collections.Generic.Dictionary<string, object?> counterTags = new();

			PopulateCounterTags(counterTags);

			_counterInstrument = _meter.CreateCounter<int>(name: "counter", unit: null, description: null, tags: counterTags);
			global::System.Collections.Generic.Dictionary<string, object?> histogramTags = new();

			PopulateHistogramTags(histogramTags);

			_histogramInstrument = _meter.CreateHistogram<int>(name: "histogram", unit: null, description: null, tags: histogramTags);
			global::System.Collections.Generic.Dictionary<string, object?> upDownCounterTags = new();

			PopulateUpDownCounterTags(upDownCounterTags);

			_upDownCounterInstrument = _meter.CreateUpDownCounter<int>(name: "updowncounter", unit: null, description: null, tags: upDownCounterTags);
		}

		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		partial void PopulateMeterTags(global::System.Collections.Generic.Dictionary<string, object?> meterTags);

		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		partial void PopulateAutoCounterTags(global::System.Collections.Generic.Dictionary<string, object?> instrumentTags);

		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		partial void PopulateCounter_AutoIncrementTags(global::System.Collections.Generic.Dictionary<string, object?> instrumentTags);

		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		partial void PopulateCounterTags(global::System.Collections.Generic.Dictionary<string, object?> instrumentTags);

		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		partial void PopulateHistogramTags(global::System.Collections.Generic.Dictionary<string, object?> instrumentTags);

		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		partial void PopulateUpDownCounterTags(global::System.Collections.Generic.Dictionary<string, object?> instrumentTags);

		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void AutoCounter(System.Collections.Generic.List<string> genericParameter)
		{
			if (_autoCounterInstrument == null)
			{
				return;
			}

			global::System.Diagnostics.TagList autoCounterTagList = new();

			autoCounterTagList.Add("genericparameter", genericParameter);

			_autoCounterInstrument.Add(1, tagList: autoCounterTagList);
		}
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void Counter_AutoIncrement(System.Collections.Generic.List<string> genericParameter)
		{
			if (_counter_AutoIncrementInstrument == null)
			{
				return;
			}

			global::System.Diagnostics.TagList counter_AutoIncrementTagList = new();

			counter_AutoIncrementTagList.Add("genericparameter", genericParameter);

			_counter_AutoIncrementInstrument.Add(1, tagList: counter_AutoIncrementTagList);
		}
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void Counter(int value, System.Collections.Generic.List<string> genericParameter)
		{
			if (_counterInstrument == null)
			{
				return;
			}

			global::System.Diagnostics.TagList counterTagList = new();

			counterTagList.Add("genericparameter", genericParameter);

			_counterInstrument.Add(value, tagList: counterTagList);
		}
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void Histogram(int value, System.Collections.Generic.List<string> genericParameter)
		{
			if (_histogramInstrument == null)
			{
				return;
			}

			global::System.Diagnostics.TagList histogramTagList = new();

			histogramTagList.Add("genericparameter", genericParameter);

			_histogramInstrument.Record(value, tagList: histogramTagList);
		}
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void UpDownCounter(int value, System.Collections.Generic.List<string> genericParameter)
		{
			if (_upDownCounterInstrument == null)
			{
				return;
			}

			global::System.Diagnostics.TagList upDownCounterTagList = new();

			upDownCounterTagList.Add("genericparameter", genericParameter);

			_upDownCounterInstrument.Add(value, tagList: upDownCounterTagList);
		}
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void ObservableCounter(System.Func<int> valueFunc, System.Collections.Generic.List<string> genericParameter)
		{
			if (_observableCounterInstrument != null)
			{
				return;
			}

			global::System.Diagnostics.TagList observableCounterTagList = new();

			observableCounterTagList.Add("genericparameter", genericParameter);

			_observableCounterInstrument = _meter.CreateObservableCounter<int>("observablecounter", valueFunc, unit: null, description: null
				, tags: observableCounterTagList
			);
		}
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void ObservableGauge(System.Func<int> valueFunc, System.Collections.Generic.List<string> genericParameter)
		{
			if (_observableGaugeInstrument != null)
			{
				return;
			}

			global::System.Diagnostics.TagList observableGaugeTagList = new();

			observableGaugeTagList.Add("genericparameter", genericParameter);

			_observableGaugeInstrument = _meter.CreateObservableGauge<int>("observablegauge", valueFunc, unit: null, description: null
				, tags: observableGaugeTagList
			);
		}
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void ObservableUpDownCounter(System.Func<int> valueFunc, System.Collections.Generic.List<string> genericParameter)
		{
			if (_observableUpDownCounterInstrument != null)
			{
				return;
			}

			global::System.Diagnostics.TagList observableUpDownCounterTagList = new();

			observableUpDownCounterTagList.Add("genericparameter", genericParameter);

			_observableUpDownCounterInstrument = _meter.CreateObservableUpDownCounter<int>("observableupdowncounter", valueFunc, unit: null, description: null
				, tags: observableUpDownCounterTagList
			);
		}
	}
}
