//HintName: Testing.TestTelemetryCore.Logging.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Purview.Telemetry.SourceGenerator
//     on {Scrubbed}.
//
//     Changes to this file may cause incorrect behaviour and will be lost
//     when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

#nullable enable

namespace Testing
{
	sealed partial class TestTelemetryCore : global::Testing.ITestTelemetry
	{
		readonly global::Microsoft.Extensions.Logging.ILogger<global::Testing.ITestTelemetry> _logger;

		static readonly global::System.Action<global::Microsoft.Extensions.Logging.ILogger, int, bool, global::System.Exception?> _logAction = global::Microsoft.Extensions.Logging.LoggerMessage.Define<int, bool>(global::Microsoft.Extensions.Logging.LogLevel.Information, new global::Microsoft.Extensions.Logging.EventId(1579320335, "Log"), "Log: IntParam = {IntParam}, BoolParam = {BoolParam}");
		static readonly global::System.Func<global::Microsoft.Extensions.Logging.ILogger, int, bool, global::System.IDisposable?> _logScopeAction = global::Microsoft.Extensions.Logging.LoggerMessage.DefineScope<int, bool>("LogScope: IntParam = {IntParam}, BoolParam = {BoolParam}");

		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void Log(int intParam, bool boolParam)
		{
			if (!_logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Information))
			{
				return;
			}

			_logAction(_logger, intParam, boolParam, null);
		}


		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public global::System.IDisposable? LogScope(int intParam, bool boolParam)
		{
			return _logScopeAction(_logger, intParam, boolParam);
		}

	}
}
