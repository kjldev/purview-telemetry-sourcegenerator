//HintName: LoggingTelemetryCore.Logging.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Purview.Telemetry.SourceGenerator
//     on {Scrubbed}.
//
//     Changes to this file may cause incorrect behaviour and will be lost
//     when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

#nullable enable

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
sealed partial class LoggingTelemetryCore : global::ILoggingTelemetry
{
	readonly global::Microsoft.Extensions.Logging.ILogger<global::ILoggingTelemetry> _logger;

	static readonly global::System.Func<global::Microsoft.Extensions.Logging.ILogger, System.Guid, global::System.IDisposable?> _processingWorkItemAction = global::Microsoft.Extensions.Logging.LoggerMessage.DefineScope<System.Guid>("ProcessingWorkItem: Id = {Id}");
	static readonly global::System.Action<global::Microsoft.Extensions.Logging.ILogger, ItemTypes, global::System.Exception?> _processingItemTypeAction = global::Microsoft.Extensions.Logging.LoggerMessage.Define<ItemTypes>(global::Microsoft.Extensions.Logging.LogLevel.Trace, new global::Microsoft.Extensions.Logging.EventId(1819684787, "ProcessingItemType"), "ProcessingItemType: ItemType = {ItemType}");
	static readonly global::System.Action<global::Microsoft.Extensions.Logging.ILogger, global::System.Exception?> _failedToProcessWorkItemAction = global::Microsoft.Extensions.Logging.LoggerMessage.Define(global::Microsoft.Extensions.Logging.LogLevel.Error, new global::Microsoft.Extensions.Logging.EventId(1082978768, "FailedToProcessWorkItem"), "FailedToProcessWorkItem");
	static readonly global::System.Action<global::Microsoft.Extensions.Logging.ILogger, bool, System.TimeSpan, global::System.Exception?> _processingCompleteAction = global::Microsoft.Extensions.Logging.LoggerMessage.Define<bool, System.TimeSpan>(global::Microsoft.Extensions.Logging.LogLevel.Information, new global::Microsoft.Extensions.Logging.EventId(1684975581, "ProcessingComplete"), "ProcessingComplete: Success = {Success}, Duration = {Duration}");

	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
	public LoggingTelemetryCore(global::Microsoft.Extensions.Logging.ILogger<global::ILoggingTelemetry> logger)
	{
		_logger = logger;
	}

	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
	[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public global::System.IDisposable? ProcessingWorkItem(System.Guid id)
	{
		return _processingWorkItemAction(_logger, id);
	}


	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
	[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public void ProcessingItemType(ItemTypes itemType)
	{
		if (!_logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Trace))
		{
			return;
		}

		_processingItemTypeAction(_logger, itemType, null);
	}


	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
	[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public void FailedToProcessWorkItem(System.Exception ex)
	{
		if (!_logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Error))
		{
			return;
		}

		_failedToProcessWorkItemAction(_logger, ex);
	}


	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
	[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public void ProcessingComplete(bool success, System.TimeSpan duration)
	{
		if (!_logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Information))
		{
			return;
		}

		_processingCompleteAction(_logger, success, duration, null);
	}

}
