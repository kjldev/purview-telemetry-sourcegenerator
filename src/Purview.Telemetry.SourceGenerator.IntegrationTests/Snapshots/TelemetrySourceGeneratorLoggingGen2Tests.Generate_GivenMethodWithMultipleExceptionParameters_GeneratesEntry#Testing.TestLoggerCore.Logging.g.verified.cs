//HintName: Testing.TestLoggerCore.Logging.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Purview.Telemetry.SourceGenerator
//     on {Scrubbed}.
//
//     Changes to this file may cause incorrect behaviour and will be lost
//     when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

#nullable enable

namespace Testing
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
	sealed partial class TestLoggerCore : global::Testing.ITestLogger
	{
		readonly global::Microsoft.Extensions.Logging.ILogger<global::Testing.ITestLogger> _logger;

		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		public TestLoggerCore(global::Microsoft.Extensions.Logging.ILogger<global::Testing.ITestLogger> logger)
		{
			_logger = logger;
		}

		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void LogEntryWithMoreThanSixParams(int one, int two, int three, int four, int five, global::Testing.BadLuckException six, global::System.InvalidOperationException seven, global::System.ArgumentException eight, global::System.Exception nine, global::System.Exception? ten, global::System.Exception eleven)
		{
			if (!_logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Information))
			{
				return;
			}

			var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;
			state.ReserveTagSpace(12);

			state.TagArray[0] = new("{OriginalFormat}", "LogEntryWithMoreThanSixParams: One = {One}, Two = {Two}, Three = {Three}, Four = {Four}, Five = {Five}");
			state.TagArray[1] = new("one", one);
			state.TagArray[2] = new("two", two);
			state.TagArray[3] = new("three", three);
			state.TagArray[4] = new("four", four);
			state.TagArray[5] = new("five", five);
			state.TagArray[6] = new("six", six);
			state.TagArray[7] = new("seven", seven);
			state.TagArray[8] = new("eight", eight);
			state.TagArray[9] = new("nine", nine);
			state.TagArray[10] = new("ten", ten);
			state.TagArray[11] = new("eleven", eleven);

			_logger.Log(
				global::Microsoft.Extensions.Logging.LogLevel.Information,
				new (282537637, nameof(LogEntryWithMoreThanSixParams)),
				state,
				null,
				[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Purview.Telemetry.SourceGenerator", "0.1.0.0")]
				static string (s, _) =>
				{
					var v0 = s.TagArray[1].Value ?? "(null)";
					var v1 = s.TagArray[2].Value ?? "(null)";
					var v2 = s.TagArray[3].Value ?? "(null)";
					var v3 = s.TagArray[4].Value ?? "(null)";
					var v4 = s.TagArray[5].Value ?? "(null)";

#if NET
					return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $"LogEntryWithMoreThanSixParams: One = {v0}, Two = {v1}, Three = {v2}, Four = {v3}, Five = {v4}");
#else
					return global::System.FormattableString.Invariant($"LogEntryWithMoreThanSixParams: One = {v0}, Two = {v1}, Three = {v2}, Four = {v3}, Five = {v4}");
#endif
				}
			);

			state.Clear();
		}

	}
}
