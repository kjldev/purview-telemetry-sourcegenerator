using System.Globalization;
using System.Reflection;
using System.Text;
using Purview.Telemetry.SourceGenerator.Helpers;

namespace Purview.Telemetry.SourceGenerator.Templates;

sealed class EmbeddedResources
{
	readonly Assembly _ownerAssembly = typeof(EmbeddedResources).Assembly;
	readonly string _namespaceRoot = typeof(EmbeddedResources).Namespace;

	readonly string _autoGeneratedHeader;

	EmbeddedResources()
	{
		_autoGeneratedHeader = LoadEmbeddedResource("AutoGeneratedHeader", withHeader: false);
	}

	public static EmbeddedResources Instance { get; } = new();

	public string LoadEmbeddedResource(string resourceName, bool withHeader = true)
	{
		resourceName = $"{_namespaceRoot}.Sources.{resourceName}.cs";

		var resourceStream = _ownerAssembly.GetManifestResourceStream(resourceName);
		if (resourceStream is null)
		{
			var existingResources = _ownerAssembly.GetManifestResourceNames();
			throw new ArgumentException(
				$"Could not find embedded resource {resourceName}. Available resource names: {string.Join(", ", existingResources)}"
			);
		}

		using StreamReader reader = new(resourceStream, Encoding.UTF8);
		var result = reader.ReadToEnd();

		result = result
			.Replace("{CodeGen}", Utilities.GetClassAttributesString(false))
			.Replace("{CodeGen,enum}", Utilities.GetEnumAttributesString(false));
		if (withHeader)
			result = GetHeader() + result;

		return result.Trim();
	}

	public void AddHeader(StringBuilder builder) => builder.Insert(0, GetHeader());

	string GetHeader() =>
		_autoGeneratedHeader.Replace(
			"{DateTime}",
			DateTimeOffset.UtcNow.ToString("yyyy-MM-dd HH:mm:ss zzzz", CultureInfo.InvariantCulture)
		) + "\n\n";
}
